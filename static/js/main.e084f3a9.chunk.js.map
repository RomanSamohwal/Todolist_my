{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/TodolistsList/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/TodolistsList/Login/Login.tsx","common/Backdroploading.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializedApTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","index","findIndex","tl","changeTodolistFilterAC","map","splice","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","then","addTaskTC","item","updateTaskTC","getState","task","find","t","apiModel","deadline","description","priority","startDate","tasksReducer","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","flexBox","display","width","justifyContent","TodolistsList","useSelector","auth","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","useStyles","makeStyles","theme","createStyles","backdrop","zIndex","drawer","SimpleBackdrop","classes","Backdrop","CircularProgress","App","handlerLogout","AppBar","position","Toolbar","LinearProgress","Container","fixed","exact","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e084f3a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '92f74d04-7e37-4e04-9b99-ee5c2a5ed710'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return  instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return  instance.post<ResponseType<{userId?: string}>>('auth/login', data);\r\n    },\r\n    logout(){\r\n        return  instance.delete<ResponseType>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me',);\r\n    },\r\n\r\n}\r\n\r\n// types\r\n\r\nexport type LoginParamsType = {\r\n    email:string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC( {error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {setAppStatusAC} from '../../../app/app-reducer';\r\nimport {authAPI, FieldErrorType, LoginParamsType} from '../../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login',\r\n    async (param: LoginParamsType, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n        try {\r\n            const res = await authAPI.login(param)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return;\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch);\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            const error: AxiosError = err;\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined});\r\n        }\r\n    });\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\r\n    const res = await authAPI.logout()\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n        name: 'auth',\r\n        initialState: {\r\n            isLoggedIn: false\r\n        },\r\n        reducers: {\r\n            setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n                state.isLoggedIn = action.payload.value\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder.addCase(loginTC.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n\r\n            builder.addCase(logoutTC.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n        }\r\n    }\r\n)\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedInAC} =  slice.actions;\r\n\r\n\r\n\r\n","import {authAPI} from '../api/todolists-api';\r\nimport {setIsLoggedInAC} from '../features/TodolistsList/Login/auth-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport const initializedApTC = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    let res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n        name: 'app',\r\n    initialState : {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n        reducers: {\r\n            setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n                state.error = action.payload.error\r\n            },\r\n            setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n                state.status = action.payload.status\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder.addCase(initializedApTC.fulfilled, (state) => {\r\n                state.isInitialized = true\r\n            })\r\n        }\r\n    }\r\n)\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolist/fetchTodolists',\r\n    async (param, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            let res = await todolistsAPI.getTodolists()\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todolists: res.data}\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolist/removeTodolist',\r\n    async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        let res = await todolistsAPI.deleteTodolist(todolistId)\r\n        //скажем глобально приложению, что асинхронная операция завершена\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    })\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}\r\n\r\nconst slice = createSlice({\r\n        name: 'todolist',\r\n        initialState: [] as Array<TodolistDomainType>,\r\n        reducers: {\r\n            addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            },\r\n            changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            },\r\n            changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].filter = action.payload.filter\r\n            },\r\n            changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n        extraReducers: builder => {\r\n            builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n               return  action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n        }\r\n    }\r\n)\r\n\r\nexport const todolistsReducer = slice.reducer;\r\n\r\nexport const {\r\n    addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC\r\n} = slice.actions;\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {addTodolistAC, AddTodolistActionType, fetchTodolistsTC, removeTodolistTC,} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\n\r\nexport const fetchTasksTC = createAsyncThunk('task/fetchTask', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {todolistId, tasks}\r\n});\r\nexport const removeTaskTC = createAsyncThunk('task/removeTaskTC', (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    return todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        .then(res => ({todolistId: param.todolistId, taskId: param.taskId}))\r\n});\r\nexport const addTaskTC = createAsyncThunk('task/addTaskTC', async (param: { title: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        let res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return  res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch\r\n        (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n});\r\nexport const updateTaskTC = createAsyncThunk('task/updateTaskTC',\r\n    async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, {\r\n        dispatch,\r\n        rejectWithValue, getState\r\n    }) => {\r\n        const state = getState() as AppRootStateType;\r\n        const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return rejectWithValue('task not found in the state')\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...param.model\r\n        }\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n             return param\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue('task not found in the state')\r\n        }\r\n    })\r\n\r\nconst slice = createSlice(\r\n    {\r\n        name: 'tasks',\r\n        initialState: {} as TasksStateType,\r\n        reducers: {},\r\n        extraReducers: (builder) => {\r\n            builder.addCase(addTodolistAC, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            });\r\n            builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            });\r\n            builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            });\r\n            builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId];\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n        }\r\n    }\r\n)\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {AppRootStateType} from '../../../app/store';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst flexBox = {\r\n    display: 'flex', width: '100%', justifyContent: 'center'\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    useEffect(() => {\r\n        if (demo|| !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId: id, todolistId: todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC( {taskId: id, model : {status}, todolistId: todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, model: {title: newTitle},todolistId: todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn){\r\n        return <Redirect to = {'/login'}/>\r\n    }\r\n    return <div style={{width: '100%'}}>\r\n\r\n        <Grid container style={{padding: '20px', ...flexBox}}>\r\n           <Grid item>\r\n               <AddItemForm addItem={addTodolist}/>\r\n           </Grid>\r\n        </Grid>\r\n        <Grid container spacing={3} style={flexBox}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </div>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport { combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/TodolistsList/Login/auth-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\nimport {useDispatch} from 'react-redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})// определить автоматически тип всего объекта состояния\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppDispatchType  = typeof store.dispatch\r\n\r\nexport const useAppDispatch = () => <AppDispatchType>useDispatch()","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {useSelector} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {AppRootStateType, useAppDispatch} from '../../../app/store';\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype FormValuesType  = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if(!values.password){\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(loginTC(values))\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: '#fff',\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function SimpleBackdrop() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    return (\r\n        <div>\r\n            <Backdrop className={classes.backdrop} open={open}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n        </div>\r\n    );\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar} from '@material-ui/core'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializedApTC, RequestStatusType} from './app-reducer'\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Route} from 'react-router-dom';\r\nimport {Login} from '../features/TodolistsList/Login/Login';\r\nimport SimpleBackdrop from '../common/Backdroploading';\r\nimport {logoutTC} from '../features/TodolistsList/Login/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializedApTC())\r\n    },[])\r\n\r\n    const handlerLogout = useCallback (() => {\r\n        dispatch(logoutTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <SimpleBackdrop/>\r\n    }\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={handlerLogout}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}